import React from 'react';
import { Star } from 'lucide-react';
import CollapsibleContent from '../../components/common/CollapsibleContent';
import { formatDate } from '../../utils/formatDate';

const MOOD_OPTIONS = { happy: 'üòä', content: 'üòå', neutral: 'üòê', sad: 'üòü', anxious: 'üò∞' };

const DiaryNarrativeCard = React.memo(({ entry, onAppend }) => {
  const renderContent = () => {
    switch (entry.type) {
      case 'session':
        return (
          <div>
            <h3 className="text-xl font-bold text-stone-800 mb-2">{entry.data.title}</h3>
            <p className="text-sm text-stone-500 mb-3">–°–µ–∞–Ω—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏</p>
            <CollapsibleContent title="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–µ–∞–Ω—Å–∞" startOpen={true}>
              <div className="space-y-4">
                {entry.data.chatHistory.map((msg, index) => (
                  <div key={index}>
                    {msg.role === 'user' ? (
                      <div className="p-3 rounded-lg bg-blue-50 border border-blue-100">
                        <p className="text-sm font-semibold text-stone-600 mb-1">–í—ã:</p>
                        <p className="whitespace-pre-wrap">{msg.content}</p>
                      </div>
                    ) : (
                      <CollapsibleContent title="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞">
                        <p className="whitespace-pre-wrap">{msg.content}</p>
                      </CollapsibleContent>
                    )}
                  </div>
                ))}
              </div>
            </CollapsibleContent>
          </div>
        );
      case 'goal':
        return (
          <div>
            <h4 className="font-semibold text-stone-800">{entry.data.completed ? '–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å' : '–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å'}: {entry.data.text}</h4>
            <CollapsibleContent title="–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏">
              <p className="text-sm text-stone-600">{entry.data.purpose}</p>
            </CollapsibleContent>
            {entry.data.type === 'reflection' && (
              <div className="mt-3 space-y-2">
                <h5 className="font-semibold">–ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞:</h5>
                {entry.data.reflections?.map((ref, i) => (
                  <div key={i} className="p-3 bg-stone-50 rounded-md border-l-4 border-teal-300">
                    <p className="text-xs text-stone-400 mb-1">{formatDate(ref.createdAt)}</p>
                    <p className="whitespace-pre-wrap">{ref.text}</p>
                  </div>
                ))}
                 <button onClick={() => onAppend(entry)} className="mt-2 text-sm px-3 py-1 text-white bg-teal-600 rounded-lg hover:bg-teal-700 font-semibold">
                  {entry.data.reflections?.length > 0 ? '–î–æ–ø–æ–ª–Ω–∏—Ç—å' : '–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å'}
                </button>
              </div>
            )}
            {entry.data.checklistFeedback && (
              <div className="mt-3 space-y-2 p-3 bg-stone-50 rounded-md border-l-4 border-green-300">
                <h5 className="font-semibold">–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:</h5>
                {entry.data.checklistFeedback.comment && <p><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {entry.data.checklistFeedback.comment}</p>}
                <div className="flex items-center gap-1"><b>–û—Ü–µ–Ω–∫–∞:</b> {Array(entry.data.checklistFeedback.rating || 1).fill().map((_, i) => <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />)}</div>
              </div>
            )}
          </div>
        );
      case 'mood':
        return (
          <div className="flex items-center gap-4">
            <div className="flex">
              {Array(entry.data.intensity || 1).fill(MOOD_OPTIONS[entry.data.mood]).map((emoji, i) => <span key={i} className="text-4xl">{emoji}</span>)}
            </div>
            <div>
              <h4 className="font-semibold text-stone-800">–ó–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏</h4>
              {entry.data.comment && <p className="text-stone-600">{entry.data.comment}</p>}
            </div>
          </div>
        );
      case 'note':
        return (
          <div>
            <h4 className="font-semibold text-stone-800">{entry.data.title}</h4>
            {entry.data.entries?.map((noteEntry, i) => (
              <div key={i} className="p-3 mt-2 bg-stone-50 rounded-md border-l-4 border-purple-300">
                <p className="text-xs text-stone-400 mb-1">{formatDate(noteEntry.createdAt)}</p>
                <p className="whitespace-pre-wrap">{noteEntry.text}</p>
              </div>
            ))}
            <button onClick={() => onAppend(entry)} className="mt-2 text-sm px-3 py-1 text-white bg-purple-600 rounded-lg hover:bg-purple-700 font-semibold">
              –î–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
            </button>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="bg-white p-5 rounded-xl shadow-md border border-stone-200 transition-shadow hover:shadow-lg">
      {renderContent()}
    </div>
  );
});

export default DiaryNarrativeCard;
